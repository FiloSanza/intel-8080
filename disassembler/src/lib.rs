use std::error::Error;
use std::fs;

pub struct Operation    {
    pub op_code: u8,
    pub instruction: String,
    pub size: u8,
}

impl Operation  {
    pub fn new(input: (u8, u8, u8)) -> Self {
        let op_code = input.0;

        let (instruction, size) =   match op_code   {
            0x00 => (format!("NOP"), 1),
            0x01 => (format!("LXI   B,#${:x}{:x}", input.2, input.1), 3),
            0x02 => (format!("STAX  B"), 1),
            0x03 => (format!("INX   B"), 1),
            0x04 => (format!("INR   B"), 1),
            0x05 => (format!("DCR   B"), 1),
            0x06 => (format!("MVI   B,#${:x}", input.1), 2),
            0x07 => (format!("RLC"), 1),
            0x09 => (format!("DAD   B"), 1),
            0x0a => (format!("LDAX  B"), 1),
            0x0b => (format!("DCX   B"), 1),
            0x0c => (format!("INR   C"), 1),
            0x0d => (format!("DCR   C"), 1),
            0x0e => (format!("MVI   C,#${:x}", input.1), 2),
            0x0f => (format!("RRC"), 1),
            0x11 => (format!("LXI   D,#${:x}{:x}", input.2, input.1), 3),
            0x12 => (format!("STAX  D"), 1),
            0x13 => (format!("INX   D"), 1),
            0x14 => (format!("INR   D"), 1),
            0x15 => (format!("DCR   D"), 1),
            0x16 => (format!("MVI   D,#${:x}", input.1), 2),
            0x17 => (format!("RAL"), 1),
            0x19 => (format!("DAD   D"), 1),
            0x1a => (format!("LDAX  D"), 1),
            0x1b => (format!("DCX   D"), 1),
            0x1c => (format!("INR   E"), 1),
            0x1d => (format!("DCR   E"), 1),
            0x1e => (format!("MVI   E,#${:x}", input.1), 2),
            0x1f => (format!("RAR"), 1),
            0x20 => (format!("RIM"), 1),
            0x21 => (format!("LXI   H,#${:x}{:x}", input.2, input.1), 3),
            0x22 => (format!("SHLD  ${:x}{:x}", input.2, input.1), 3),
            0x23 => (format!("INX   H"), 1),
            0x24 => (format!("INR   H"), 1),
            0x25 => (format!("DCR   H"), 1),
            0x26 => (format!("MVI   H,#${:x}", input.1), 2),
            0x27 => (format!("DAA"), 1),
            0x29 => (format!("DAD   H"), 1),
            0x2a => (format!("LHLD  ${:x}{:x}", input.2, input.1), 3),
            0x2b => (format!("DCX   H"), 1),
            0x2c => (format!("INR   L"), 1),
            0x2d => (format!("DCR   L"), 1),
            0x2e => (format!("MVI   L,#${:x}", input.1), 2),
            0x2f => (format!("CMA"), 1),
            0x30 => (format!("SIM"), 1),
            0x31 => (format!("LXI   SP,#${:x}{:x}", input.2, input.1), 3),
            0x32 => (format!("STA   ${:x}{:x}", input.2, input.1), 3),
            0x33 => (format!("INX   SP"), 1),
            0x34 => (format!("INR   M"), 1),
            0x35 => (format!("DCR   M"), 1),
            0x36 => (format!("MVI   M,#${:x}", input.1), 2),
            0x37 => (format!("STC"), 1),
            0x39 => (format!("DAD   SP"), 1),
            0x3a => (format!("LDA   ${:x}{:x}", input.2, input.1), 3),
            0x3b => (format!("DCX   SP"), 1),
            0x3c => (format!("INR   A"), 1),
            0x3d => (format!("DCR   A"), 1),
            0x3e => (format!("MVI   A,#${:x}", input.1), 2),
            0x3f => (format!("CMC"), 1),
            0x40 => (format!("MOV   B,B"), 1),
            0x41 => (format!("MOV   B,C"), 1),
            0x42 => (format!("MOV   B,D"), 1),
            0x43 => (format!("MOV   B,E"), 1),
            0x44 => (format!("MOV   B,H"), 1),
            0x45 => (format!("MOV   B,L"), 1),
            0x46 => (format!("MOV   B,M"), 1),
            0x47 => (format!("MOV   B,A"), 1),
            0x48 => (format!("MOV   C,B"), 1),
            0x49 => (format!("MOV   C,C"), 1),
            0x4a => (format!("MOV   C,D"), 1),
            0x4b => (format!("MOV   C,E"), 1),
            0x4c => (format!("MOV   C,H"), 1),
            0x4d => (format!("MOV   C,L"), 1),
            0x4e => (format!("MOV   C,M"), 1),
            0x4f => (format!("MOV   C,A"), 1),
            0x50 => (format!("MOV   D,B"), 1),
            0x51 => (format!("MOV   D,C"), 1),
            0x52 => (format!("MOV   D,D"), 1),
            0x53 => (format!("MOV   D,E"), 1),
            0x54 => (format!("MOV   D,H"), 1),
            0x55 => (format!("MOV   D,L"), 1),
            0x56 => (format!("MOV   D,M"), 1),
            0x57 => (format!("MOV   D,A"), 1),
            0x58 => (format!("MOV   E,B"), 1),
            0x59 => (format!("MOV   E,C"), 1),
            0x5a => (format!("MOV   E,D"), 1),
            0x5b => (format!("MOV   E,E"), 1),
            0x5c => (format!("MOV   E,H"), 1),
            0x5d => (format!("MOV   E,L"), 1),
            0x5e => (format!("MOV   E,M"), 1),
            0x5f => (format!("MOV   E,A"), 1),
            0x60 => (format!("MOV   H,B"), 1),
            0x61 => (format!("MOV   H,C"), 1),
            0x62 => (format!("MOV   H,D"), 1),
            0x63 => (format!("MOV   H,E"), 1),
            0x64 => (format!("MOV   H,H"), 1),
            0x65 => (format!("MOV   H,L"), 1),
            0x66 => (format!("MOV   H,M"), 1),
            0x67 => (format!("MOV   H,A"), 1),
            0x68 => (format!("MOV   L,B"), 1),
            0x69 => (format!("MOV   L,C"), 1),
            0x6a => (format!("MOV   L,D"), 1),
            0x6b => (format!("MOV   L,E"), 1),
            0x6c => (format!("MOV   L,H"), 1),
            0x6d => (format!("MOV   L,L"), 1),
            0x6e => (format!("MOV   L,M"), 1),
            0x6f => (format!("MOV   L,A"), 1),
            0x70 => (format!("MOV   M,B"), 1),
            0x71 => (format!("MOV   M,C"), 1),
            0x72 => (format!("MOV   M,D"), 1),
            0x73 => (format!("MOV   M,E"), 1),
            0x74 => (format!("MOV   M,H"), 1),
            0x75 => (format!("MOV   M,L"), 1),
            0x76 => (format!("HLT"), 1),
            0x77 => (format!("MOV   M,A"), 1),
            0x78 => (format!("MOV   A,B"), 1),
            0x79 => (format!("MOV   A,C"), 1),
            0x7a => (format!("MOV   A,D"), 1),
            0x7b => (format!("MOV   A,E"), 1),
            0x7c => (format!("MOV   A,H"), 1),
            0x7d => (format!("MOV   A,L"), 1),
            0x7e => (format!("MOV   A,M"), 1),
            0x7f => (format!("MOV   A,A"), 1),
            0x80 => (format!("ADD   B"), 1),
            0x81 => (format!("ADD   C"), 1),
            0x82 => (format!("ADD   D"), 1),
            0x83 => (format!("ADD   E"), 1),
            0x84 => (format!("ADD   H"), 1),
            0x85 => (format!("ADD   L"), 1),
            0x86 => (format!("ADD   M"), 1),
            0x87 => (format!("ADD   A"), 1),
            0x88 => (format!("ADC   B"), 1),
            0x89 => (format!("ADC   C"), 1),
            0x8a => (format!("ADC   D"), 1),
            0x8b => (format!("ADC   E"), 1),
            0x8c => (format!("ADC   H"), 1),
            0x8d => (format!("ADC   L"), 1),
            0x8e => (format!("ADC   M"), 1),
            0x8f => (format!("ADC   A"), 1),
            0x90 => (format!("SUB   B"), 1),
            0x91 => (format!("SUB   C"), 1),
            0x92 => (format!("SUB   D"), 1),
            0x93 => (format!("SUB   E"), 1),
            0x94 => (format!("SUB   H"), 1),
            0x95 => (format!("SUB   L"), 1),
            0x96 => (format!("SUB   M"), 1),
            0x97 => (format!("SUB   A"), 1),
            0x98 => (format!("SBB   B"), 1),
            0x99 => (format!("SBB   C"), 1),
            0x9a => (format!("SBB   D"), 1),
            0x9b => (format!("SBB   E"), 1),
            0x9c => (format!("SBB   H"), 1),
            0x9d => (format!("SBB   L"), 1),
            0x9e => (format!("SBB   M"), 1),
            0x9f => (format!("SBB   A"), 1),
            0xa0 => (format!("ANA   B"), 1),
            0xa1 => (format!("ANA   C"), 1),
            0xa2 => (format!("ANA   D"), 1),
            0xa3 => (format!("ANA   E"), 1),
            0xa4 => (format!("ANA   H"), 1),
            0xa5 => (format!("ANA   L"), 1),
            0xa6 => (format!("ANA   M"), 1),
            0xa7 => (format!("ANA   A"), 1),
            0xa8 => (format!("XRA   B"), 1),
            0xa9 => (format!("XRA   C"), 1),
            0xaa => (format!("XRA   D"), 1),
            0xab => (format!("XRA   E"), 1),
            0xac => (format!("XRA   H"), 1),
            0xad => (format!("XRA   L"), 1),
            0xae => (format!("XRA   M"), 1),
            0xaf => (format!("XRA   A"), 1),
            0xb0 => (format!("ORA   B"), 1),
            0xb1 => (format!("ORA   C"), 1),
            0xb2 => (format!("ORA   D"), 1),
            0xb3 => (format!("ORA   E"), 1),
            0xb4 => (format!("ORA   H"), 1),
            0xb5 => (format!("ORA   L"), 1),
            0xb6 => (format!("ORA   M"), 1),
            0xb7 => (format!("ORA   A"), 1),
            0xb8 => (format!("CMP   B"), 1),
            0xb9 => (format!("CMP   C"), 1),
            0xba => (format!("CMP   D"), 1),
            0xbb => (format!("CMP   E"), 1),
            0xbc => (format!("CMP   H"), 1),
            0xbd => (format!("CMP   L"), 1),
            0xbe => (format!("CMP   M"), 1),
            0xbf => (format!("CMP   A"), 1),
            0xc0 => (format!("RNZ"), 1),
            0xc1 => (format!("POP   B"), 1),
            0xc2 => (format!("JNZ   ${:x}{:x}", input.2, input.1), 3),
            0xc3 => (format!("JMP   ${:x}{:x}", input.2, input.1), 3),
            0xc4 => (format!("CNZ   ${:x}{:x}", input.2, input.1), 3),
            0xc5 => (format!("PUSH  B"), 1),
            0xc6 => (format!("ADI   #${:x}", input.1), 2),
            0xc7 => (format!("RST   0"), 1),
            0xc8 => (format!("RZ"), 1),
            0xc9 => (format!("RET"), 1),
            0xca => (format!("JZ    ${:x}{:x}", input.2, input.1), 3),
            0xcc => (format!("CZ    ${:x}{:x}", input.2, input.1), 3),
            0xcd => (format!("CALL  ${:x}{:x}", input.2, input.1), 3),
            0xce => (format!("ACI   #${:x}", input.1), 2),
            0xcf => (format!("RST   1"), 1),
            0xd0 => (format!("RNC"), 1),
            0xd1 => (format!("POP   D"), 1),
            0xd2 => (format!("JNC   ${:x}{:x}", input.2, input.1), 3),
            0xd3 => (format!("OUT   #${:x}", input.1), 2),
            0xd4 => (format!("CNC   ${:x}{:x}", input.2, input.1), 3),
            0xd5 => (format!("PUSH  D"), 1),
            0xd6 => (format!("SUI   #${:x}", input.1), 2),
            0xd7 => (format!("RST   2"), 1),
            0xd8 => (format!("RC"), 1),
            0xda => (format!("JC    ${:x}{:x}", input.2, input.1), 3),
            0xdb => (format!("IN    #${:x}", input.1), 2),
            0xdc => (format!("CC    ${:x}{:x}", input.2, input.1), 3),
            0xde => (format!("SBI   #${:x}", input.1), 2),
            0xdf => (format!("RST   3"), 1),
            0xe0 => (format!("RPO"), 1),
            0xe1 => (format!("POP   H"), 1),
            0xe2 => (format!("JPO   ${:x}{:x}", input.2, input.1), 3),
            0xe3 => (format!("XTHL"), 1),
            0xe4 => (format!("CPO   ${:x}{:x}", input.2, input.1), 3),
            0xe5 => (format!("PUSH  H"), 1),
            0xe6 => (format!("ANI   #${:x}", input.1), 2),
            0xe7 => (format!("RST   4"), 1),
            0xe8 => (format!("RPE"), 1),
            0xe9 => (format!("PCHL"), 1),
            0xea => (format!("JPE   ${:x}{:x}", input.2, input.1), 3),
            0xeb => (format!("XCHG"), 1),
            0xec => (format!("CPE   ${:x}{:x}", input.2, input.1), 3),
            0xee => (format!("XRI   #${:x}", input.1), 2),
            0xef => (format!("RST   5"), 1),
            0xf0 => (format!("RP"), 1),
            0xf1 => (format!("POP   PSW"), 1),
            0xf2 => (format!("JP    ${:x}{:x}", input.2, input.1), 3),
            0xf3 => (format!("DI"), 1),
            0xf4 => (format!("CP    ${:x}{:x}", input.2, input.1), 3),
            0xf5 => (format!("PUSH  PSW"), 1),
            0xf6 => (format!("ORI   #${:x}", input.1), 2),
            0xf7 => (format!("RST   6"), 1),
            0xf8 => (format!("RM"), 1),
            0xf9 => (format!("SPHL"), 1),
            0xfa => (format!("JM    ${:x}{:x}", input.2, input.1), 3),
            0xfb => (format!("EI"), 1),
            0xfc => (format!("CM    ${:x}{:x}", input.2, input.1), 3),
            0xfe => (format!("CPI   #${:x}", input.1), 2),
            0xff => (format!("RST   7"), 1),
            _ => (format!("NOP"), 1),
        };

        Operation{
            op_code,
            instruction,
            size
        }
    }
}

pub fn run(filename: &str) -> Result<(),    Box<dyn Error>> {
    let mut buffer = fs::read(filename)?;
    let mut pc = 0;

    buffer.push(0x00);
    buffer.push(0x00);

    while pc <  buffer.len()-2  {
        let op = Operation::new((buffer[pc],    buffer[pc+1],  buffer[pc+2]));
        println!("{:x}\t{}", pc, op.instruction);
        pc += op.size   as usize;
    }

    Ok(())
}